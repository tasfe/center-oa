<?xml version="1.0" encoding="UTF-8"?>
<project name="osgimodulebuilder" default="build.bunlde.jar" basedir=".">

	<property file="META-INF/MANIFEST.MF" />
	<property name="bundleName" value="${Bundle-SymbolicName}_${Bundle-Version}" />
	<property name="dependlib" value="../jar_depend" />
	<property name="basews" value="${ws}" />
	<property name="baseos" value="${os}" />
	<property name="basearch" value="${arch}" />
	<property name="basenl" value="${nl}" />
	<property name="jar_dir" value="${dependlib}/service" />

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="true" />
	<property name="javacDebugInfo" value="yes" />
	<property name="javacVerbose" value="false" />
	<property name="logExtension" value=".log" />
	<property name="compilerArg" value="" />
	<property name="javacSource" value="1.5" />
	<property name="javacTarget" value="1.5" />
	<property name="fork" value="false" />
	<property name="memorymaximumsize" value="1024M" />

	<condition property="dir_bootclasspath" value="${java.home}/../Classes">
		<os family="mac" />
	</condition>
	<property name="dir_bootclasspath" value="${java.home}/lib" />
	<path id="path_bootclasspath">
		<fileset dir="${dir_bootclasspath}">
			<include name="*.jar" />
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath" />
	<property name="bundleJavacSource" value="${javacSource}" />
	<property name="bundleJavacTarget" value="${javacTarget}" />
	<property name="bundleBootClasspath" value="${bootclasspath}" />

	<condition property="foldernotexist">
		<not>
			<available file="${basedir}/lib" type="dir" />
		</not>
	</condition>

	<target name="init" depends="properties,init_lib">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder" />
		</condition>
		<property name="pluginTemp" value="${basedir}" />
		<condition property="build.result.folder" value="${pluginTemp}/${bundleName}">
			<isset property="buildTempFolder" />
		</condition>
		<property name="build.result.folder" value="${basedir}" />
		<property name="temp.folder" value="${basedir}/temp.folder" />
		<property name="plugin.destination" value="${basedir}" />
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
	</target>

	<target name="init_lib" if="foldernotexist">
		<mkdir dir="${basedir}/lib" />
		<property name="hasCreateLib" value="true" />
	</target>

	<target name="delete_lib" if="hasCreateLib">
		<delete dir="${basedir}/lib" />
	</target>

	<target name="build.bunlde.jar" depends="clean" description="Build the plug-in: ${bundleName} for an update site.">
		<delete dir="${temp.folder}" />
		<mkdir dir="${temp.folder}" />
		<antcall target="build.jars" />
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<jar destfile="${jar_dir}/${bundleName}.jar" basedir="${temp.folder}/${bundleName}" filesetmanifest="merge" />
		<delete dir="${temp.folder}" />
		<delete dir="${build.result.folder}/@dot" />
		<antcall target="delete_lib" />
	</target>


	<target name="@dot" depends="init" unless="@dot" description="Create jar: ${bundleName} @dot.">
		<delete dir="${temp.folder}/@dot.bin" />
		<mkdir dir="${temp.folder}/@dot.bin" />
		<path id="@dot.classpath">
			<!-- include eclipse osgi bundle -->
			<fileset dir="${dependlib}/bootstrap">
				<include name="**/*.jar" />
			</fileset>
			<!-- include depend jar in self lib -->
			<fileset dir="${plugin.destination}/lib">
				<include name="**/*.jar" />
			</fileset>
			<!-- include service bundles which depended by this module -->
			<fileset dir="${dependlib}/service">
				<include name="**/*.jar" />
			</fileset>
			<!-- include dev jar -->
			<fileset dir="${dependlib}/lib">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${dependlib}/lib_self">
				<include name="**/*.jar" />
			</fileset>
			<!-- include systen bundles -->
			<fileset dir="${dependlib}/bundles">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/@dot.bin" fork="${fork}" memorymaximumsize="${memorymaximumsize}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}" encoding="UTF-8">
			<classpath refid="@dot.classpath" />
			<src path="src/" />
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
		<antcall target="delete_lib" />
		<!-- Copy necessary resources -->
		<copy todir="${temp.folder}/@dot.bin" failonerror="true" overwrite="false">
			<fileset dir="src/">
				<exclude name="**/*.java" />
				<exclude name="**/package.htm*" />
			</fileset>
		</copy>
		<mkdir dir="${build.result.folder}" />
		<copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
			<!--copy class-->
			<fileset dir="${temp.folder}/@dot.bin">
			</fileset>
			<!--copy lib,resource-->
			<fileset dir="${basedir}">
				<exclude name="src/**" />
				<exclude name="bin/**" />
				<exclude name="cvs/**" />
				<exclude name="temp.folder/**" />
				<exclude name=".svn/**" />
				<exclude name=".settings/**" />
				<exclude name=".*" />
				<exclude name="build*.*" />
			</fileset>
		</copy>
		<delete dir="${temp.folder}/@dot.bin" />
	</target>

	<target name="src.zip" depends="init" unless="src.zip">
		<mkdir dir="${build.result.folder}" />
		<zip destfile="${build.result.folder}/src.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/">
				<include name="**/*.java" />
			</fileset>
		</zip>
	</target>

	<target name="build.jars" depends="init" description="Compile classes and build nested jars for the plug-in: ${bundleName}.">
		<available property="@dot" file="${build.result.folder}/@dot" />
		<antcall target="@dot" />
	</target>

	<target name="build.sources" depends="init">
		<available property="src.zip" file="${build.result.folder}/src.zip" />
		<antcall target="src.zip" />
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleName}" />
		<copy todir="${destination.temp.folder}/${bundleName}" failonerror="true" overwrite="false">
			<fileset dir="${build.result.folder}/@dot">
				<include name="**" />
			</fileset>
		</copy>
		<copy todir="${destination.temp.folder}/${bundleName}" failonerror="true" overwrite="false">
			<fileset dir="${basedir}">
				<include name="META-INF/" />
			</fileset>
		</copy>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleName}" />
		<copy file="${build.result.folder}/src.zip" todir="${destination.temp.folder}/${bundleName}" failonerror="false" overwrite="false" />
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleName}" />
		<copy todir="${destination.temp.folder}/${bundleName}" failonerror="false" overwrite="false">
			<fileset dir="${temp.folder}">
				<include name="@dot.bin${logExtension}" />
			</fileset>
		</copy>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: ${bundleName} of all the zips, jars and logs created.">
		<delete dir="${build.result.folder}/@dot" />
		<delete file="${build.result.folder}/src.zip" />
		<delete file="${plugin.destination}/${bundleName}.zip" />
		<delete file="${jar_dir}/${bundleName}.jar" />
		<delete dir="${temp.folder}" />
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="${basedir}" property="resourcePath" />
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: ${bundleName}.">
		<delete dir="${temp.folder}" />
		<mkdir dir="${temp.folder}" />
		<antcall target="build.jars" />
		<antcall target="build.sources" />
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<delete>
			<fileset dir="${temp.folder}">
				<include name="**/*.bin${logExtension}" />
			</fileset>
		</delete>
		<zip destfile="${plugin.destination}/${bundleName}.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false" />
		<delete dir="${temp.folder}" />
	</target>

</project>
